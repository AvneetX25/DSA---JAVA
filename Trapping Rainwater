// OPTIMAL APPROACH-TWO POINTERS
// TC-O(N)
// SC-O(1)
class Solution {
    public int trap(int[] height) {
        int n=height.length;
        int left=0;
        int right=n-1;
        int leftMax=0;
        int rightMax=0;
        int res=0;
        while(left<=right){
            if(height[left]<=height[right]){
                if(height[left]>=leftMax){
                   leftMax=height[left];
                }
                else{
                    res+=leftMax-height[left];
                }
                left++;
            }
            else{
                if(height[right]>=rightMax){
                   rightMax=height[right];
                }
                else{
                    res+=rightMax-height[right];
                }
                right--;
            }
        }
        return res;

        
    }
}

//Brute Force - (Taking two arrays for preffix and sufffix sum)
// TC-O(3N)
// SC-O(N)
class Solution {
    public int trap(int[] height) {
        int n=height.length;
        int ans=0;
        int [] prefixMax= new int[n];
        int [] suffixMax= new int[n];
        prefixMax[0]=height[0];
        for(int i=1;i<n;i++){
            prefixMax[i]=Math.max(prefixMax[i-1],height[i]);
        }
        suffixMax[n-1]=height[n-1];
        for(int j=n-2;j>=0;j--){
            suffixMax[j]=Math.max(suffixMax[j+1],height[j]);
        }
        for(int k=0;k<n;k++){
            ans+=Math.min(prefixMax[k],suffixMax[k])-height[k];


        }
        return ans;

    
        
    }
}
